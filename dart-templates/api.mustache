// @dart=2.10
part of {{pubName}}.api;

{{#operations}}
class {{classname}} {
  {{classname}}([ApiClient apiClient]) : apiClient = apiClient ?? defaultApiClient;

  final ApiClient apiClient;

  {{#operation}}
  /// {{summary}}
  ///
  /// {{notes}}
  Future<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}> {{nickname}}(
    {{#allParams}}{{#required}}{{{dataType}}} {{paramName}},{{/required}}{{/allParams}}
    {{#hasOptionalParams}}{
      {{#allParams}}{{^required}}{{{dataType}}} {{paramName}},{{/required}}{{/allParams}}
    }{{/hasOptionalParams}}
  ) async {
    // verify required params are set
    {{#allParams}}{{#required}}
    if ({{paramName}} == null) {
     throw ApiException(0, "Missing required param: {{paramName}}");
    }
    {{/required}}{{/allParams}}

    // create path and map variables
    final String path = "{{{path}}}".replaceAll("{format}","json"){{#pathParams}}.replaceAll("{" + "{{baseName}}" + "}", {{{paramName}}}.toString()){{/pathParams}};

    // query params
    final List<QueryParam> queryParams = <QueryParam>[
    {{#queryParams}}
      {{^required}}
      if ({{paramName}} != null)
      {{/required}}
        ..._convertParametersForCollectionFormat("{{baseName}}", {{paramName}}{{#collectionFormat}}, collectionFormat: "{{collectionFormat}}"{{/collectionFormat}}),
      {{/queryParams}}
    ];

    // header params
    final Map<String, String> headerParams = <String, String>{
      {{#headerParams}}
        {{#isDateTime}}
          if({{paramName}} is {{{dataType}}}) "{{baseName}}": {{paramName}}.toIso8601String(),
        {{/isDateTime}}
        {{^isDateTime}}
          if({{paramName}} is {{{dataType}}}) "{{baseName}}": {{paramName}}.toString(),
        {{/isDateTime}}
      {{/headerParams}}
    };

    final List<String> contentTypes = <String>[
      {{#consumes}}"{{{mediaType}}}",{{/consumes}}
      "application/json",
    ];

    final List<String> authNames = <String>[
      {{#authMethods}}"{{name}}", {{/authMethods}}
    ];

    final Response response = await apiClient.invokeAPI(
      path: path,
      method: '{{httpMethod}}',
      queryParams: queryParams,
      {{#bodyParam}}body: {{paramName}},{{/bodyParam}}
      headerParams: headerParams,
      contentType: contentTypes[0],
      authNames: authNames,
    );

    if (response.statusCode >= 400) {
      throw ApiException(response.statusCode, response.body);
    }

    if (response.body == null) {
      return {{#returnType}}null{{/returnType}};
    }

    {{#isListContainer}}
      return {{#returnType}}List<{{{returnBaseType}}}>.from(apiClient.deserialize(response.body, '{{{returnType}}}')){{/returnType}};
    {{/isListContainer}}
    {{^isListContainer}}
      {{#isMapContainer}}
        return {{#returnType}}{{{returnType}}}.from(apiClient.deserialize(response.body, '{{{returnType}}}')) {{/returnType}};
      {{/isMapContainer}}
      {{^isMapContainer}}
        return {{#returnType}}apiClient.deserialize(response.body, '{{{returnType}}}') as {{{returnType}}} {{/returnType}};
      {{/isMapContainer}}
    {{/isListContainer}}
  }
  {{/operation}}
}
{{/operations}}
