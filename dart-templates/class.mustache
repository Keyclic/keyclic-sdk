{{#vars}}
  {{#allowableValues}}
    {{^min}}
      class {{classname}}{{datatypeWithEnum}} {
        {{#enumVars}}
          static const String {{name}} = {{{value}}};
        {{/enumVars}}
      }
    {{/min}}
  {{/allowableValues}}
{{/vars}}

class {{classname}} {{#interfaces}}extends {{interfaces.0}} {{/interfaces}}{
{{classname}}({{#hasVars}}{ {{#vars}}this.{{name}},{{/vars}} }{{/hasVars}});

  factory {{classname}}.fromJson(Map<String, dynamic> json) {
    if (json == null) {
      return null;
    }

    {{#vars}}
    {{#isDateTime}}
        {{{datatype}}} {{name}} = json['{{baseName}}'] == null ? null : DateTime.parse(json['{{baseName}}']);
        if ({{name}} is DateTime && {{name}}.isUtc == false) {
          {{=<< >>=}}
            <<name>> = DateTime.parse('${<<name>>.toIso8601String()}Z');
          <<={{ }}=>>
        }

      {{/isDateTime}}
    {{/vars}}

    return {{classname}}(
      {{#vars}}
      {{#isDateTime}}
        {{name}}: {{name}},
      {{/isDateTime}}
      {{^isDateTime}}
        {{#complexType}}
          {{#isListContainer}}
            {{name}}: {{complexType}}.listFromJson(json['{{baseName}}']),
          {{/isListContainer}}
          {{^isListContainer}}
            {{#isMapContainer}}
              {{name}}: {{complexType}}.mapFromJson(json['{{baseName}}']),
            {{/isMapContainer}}
            {{^isMapContainer}}
              {{name}}: {{complexType}}.fromJson(json['{{baseName}}']),
            {{/isMapContainer}}
          {{/isListContainer}}
        {{/complexType}}
        {{^complexType}}
          {{#isListContainer}}
            {{name}}: json['{{baseName}}'] is List ? List<{{{items.datatype}}}>.from(json['{{baseName}}']) : null,
          {{/isListContainer}}
          {{^isListContainer}}
            {{! Double type in dart must have a point separator (0 must be cast in 0.0) }}
            {{#isFloat}}
              {{name}}: json['{{baseName}}']?.toDouble(),
            {{/isFloat}}
            {{^isFloat}}
              {{name}}: json['{{baseName}}'],
            {{/isFloat}}
          {{/isListContainer}}
        {{/complexType}}
      {{/isDateTime}}
    {{/vars}}
    );
  }

  {{#vars}}
    {{#description}}/* {{{description}}} */{{/description}}
    {{#allowableValues}}
      {{#min}}
        /// range from {{min}} to {{max}}
      {{/min}}
      {{^min}}
        /// use {{classname}}{{datatypeWithEnum}}
      {{/min}}
    {{/allowableValues}}
    {{{datatype}}} {{name}};
  {{/vars}}

  @override
  bool operator==(dynamic other) {
    // Same reference
    if (identical(this, other)) {
      return true;
    }

    return other is {{classname}} && runtimeType == other.runtimeType
      {{#vars}}
        {{#isContainer}}
          && DeepCollectionEquality.unordered().equals({{name}}, other.{{name}})
        {{/isContainer}}
        {{^isContainer}}
          && {{name}} == other.{{name}}
        {{/isContainer}}
      {{/vars}}
    ;
  }

  /// By default hashCode return reference
  @override
  int get hashCode {
    int hashCode = 0;

    {{#vars}}
      {{#isListContainer}}
        if ({{name}} is List && {{name}}.isNotEmpty) {
          hashCode ^= {{name}}.map(({{{items.datatype}}} element) => element.hashCode).reduce((int value, int cursor) => value ^ cursor);
        }
      {{/isListContainer}}
    {{/vars}}

    {{#vars}}
      {{#isMapContainer}}
        if ({{name}} is Map && {{name}}.isNotEmpty) {
          hashCode ^= {{name}}.keys.map((dynamic element) => element.hashCode).reduce((int value, int cursor) => value ^ cursor);
          hashCode ^= {{name}}.values.map((dynamic element) => element.hashCode).reduce((int value, int cursor) => value ^ cursor);
        }
      {{/isMapContainer}}
    {{/vars}}

    {{#vars}}
      {{^isListContainer}}
        {{^isMapContainer}}
          hashCode ^= {{name}}?.hashCode ?? 0;
        {{/isMapContainer}}
      {{/isListContainer}}
    {{/vars}}

    return hashCode;
  }

  static List<{{classname}}> listFromJson(List<dynamic> json) {
    return json?.map((dynamic value) => {{classname}}.fromJson(value))?.toList() ?? <{{classname}}>[];
  }

  static Map<String, {{classname}}> mapFromJson(Map<String, dynamic> json) {
    return json?.map<String, {{classname}}>((String key, dynamic value) {
      return MapEntry(key, {{classname}}.fromJson(value));
    }) ?? <String, {{classname}}>{};
  }

  Map<String, dynamic> toJson() {
    return {
      {{#vars}}
      {{#isDateTime}}
        '{{{baseName}}}': {{name}}.toUtc().toIso8601String(),
      {{/isDateTime}}
      {{^isDateTime}}
        {{#complexType}}
          {{#isContainer}}
            '{{{baseName}}}': {{name}},
          {{/isContainer}}
          {{^isContainer}}
            '{{{baseName}}}': {{name}}.toJson(),
          {{/isContainer}}
        {{/complexType}}
        {{^complexType}}
          '{{{baseName}}}': {{name}},
        {{/complexType}}
      {{/isDateTime}}
      {{/vars}}
    };
  }

  @override
  String toString() {
    return '{{classname}}[{{#vars}}{{name}}=${{name}}, {{/vars}}]';
  }
}
