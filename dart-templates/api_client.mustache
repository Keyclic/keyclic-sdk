// @dart=2.10
part of {{pubName}}.api;

class QueryParam {
  QueryParam(this.name, this.value);

  String name;
  String value;
}

class ApiClient {
  ApiClient({
    this.basePath = "{{{basePath}}}",
    this.debug = false,
  });

  final Map<String, Authentication> _authentications = {
    // Setup authentications (key: authentication name, value: authentication).
    {{=<< >>=}}
    <<!
    {{#authMethods}}{{#isBasic}}
    //'{{name}}': = HttpBasicAuth(),
    {{/isBasic}}{{#isApiKey}}
    {{#isKeyInHeader}}
    //'{{name}}': ApiKeyAuth("header", "{{keyParamName}}"),
    {{/isKeyInHeader}}
    {{^isKeyInHeader}}
    //'{{name}}': ApiKeyAuth("query", "{{keyParamName}}"),
    {{/isKeyInHeader}}
    {{/isApiKey}}{{#isOAuth}}
    //'{{name}}': OAuth(),
    {{/isOAuth}}{{/authMethods}}
    >>
    <<={{ }}=>>
    {{! TODO: change API to use OAuth2 method in security definition }}
    {{! Override _authentications['bearer'] }}
    {{#authMethods}}'{{name}}': OAuth(),{{/authMethods}}
  };
  final Logger _logger = Logger('ApiClient');
  final RegExp _regList = RegExp(r'^List<(.*)>$');
  final RegExp _regMap = RegExp(r'^Map<String,(.*)>$');

  final String basePath;
  final bool debug;
  final Client client = Client();

  Map<String, String> _defaultHeaderMap = <String, String>{};

  void addDefaultHeader(String key, String value) {
    _defaultHeaderMap[key] = value;
  }

  dynamic deserialize(String jsonVal, String targetType) {
    // Remove all spaces.  Necessary for reg expressions as well.
    targetType = targetType.replaceAll(' ', '');

    if (targetType == 'String') {
      return jsonVal;
    }

    var decodedJson = json.decode(jsonVal);

    return _deserialize(decodedJson, targetType);
  }

  // We don't use a Map<String, String> for queryParams.
  // If collectionFormat is 'multi' a key might appear multiple times.
  Future<Response> invokeAPI({
    String path,
    String method,
    Iterable<QueryParam> queryParams,
    Object body,
    Map<String, String> headerParams,
    String contentType,
    List<String> authNames,
  }) async {
    _updateParamsForAuth(authNames, queryParams, headerParams);

    final List<String> queryParamList = queryParams
    .where((QueryParam queryParam) => queryParam.value != null)
    .map<String>((QueryParam queryParam) => '${queryParam.name}=${queryParam.value}')
    .toList();

    String queryString = queryParamList.isNotEmpty ? '?${queryParamList.join('&')}' : '';

    final String url = '$basePath$path$queryString';

    headerParams.addAll(_defaultHeaderMap);
    headerParams['Content-Type'] = contentType;

    final String msgBody = serialize(body);

    if (debug) {
      _logger.info('url: ${url}');
    }

    switch(method) {
      case "POST":
        return client.post(Uri.parse(url), headers: headerParams, body: msgBody);
      case "PUT":
        return client.put(Uri.parse(url), headers: headerParams, body: msgBody);
      case "DELETE":
        return client.delete(Uri.parse(url), headers: headerParams);
      case "PATCH":
        return client.patch(Uri.parse(url), headers: headerParams, body: msgBody);
      default:
        return client.get(Uri.parse(url), headers: headerParams);
    }
  }

  String serialize(Object obj) {
    if (obj == null) {
      return '';
    }

    return json.encode(obj);
  }

  void setAccessToken(String accessToken) {
    _authentications.forEach((key, auth) {
      auth.setAccessToken(accessToken);
    });
  }

  dynamic _deserialize(dynamic value, String targetType) {
    try {
      switch (targetType) {
        case 'String':
          return '$value';
        case 'int':
          return value is int ? value : int.parse('$value');
        case 'bool':
          return value is bool ? value : '$value'.toLowerCase() == 'true';
        case 'double':
          return value is double ? value : double.parse('$value');
        {{#models}}
          {{#model}}
            case '{{classname}}':
              return {{classname}}.fromJson(value);
          {{/model}}
        {{/models}}
        default: {
          Match match;
          if (value is List && (match = _regList.firstMatch(targetType)) != null) {
            return value.map((dynamic v) => _deserialize(v, match[1])).toList();
          }

          if (value is Map && (match = _regMap.firstMatch(targetType)) != null) {
            return Map.fromIterables(value.keys, value.values.map((v) => _deserialize(v, match[1])));
          }
        }
      }
    } catch (exception, stack) {
      throw ApiException.withInner(500, 'Exception during deserialization with type: $targetType.', exception, stack);
    }

    throw ApiException(500, 'Could not find a suitable class for deserialization');
  }

  /// Update query and header parameters based on authentication settings.
  /// @param authNames The authentications to apply
  void _updateParamsForAuth(
    List<String> authNames,
    List<QueryParam> queryParams,
    Map<String, String> headerParams,
  ) {
    authNames.forEach((authName) {
      Authentication auth = _authentications[authName];
      if (auth == null) {
        throw ArgumentError("Authentication undefined: $authName");
      }
      auth.applyToParams(queryParams, headerParams);
    });
  }
}
